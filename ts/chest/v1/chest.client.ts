// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "chest/v1/chest.proto" (package "chest.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CipherChestService } from "./chest";
import type { SetNotificationResponse } from "./chest";
import type { SetNotificationRequest } from "./chest";
import type { SubmitGuessResponse } from "./chest";
import type { SubmitGuessRequest } from "./chest";
import type { GetTrymapResponse } from "./chest";
import type { GetTrymapRequest } from "./chest";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListChestsResponse } from "./chest";
import type { ListChestsRequest } from "./chest";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service chest.v1.CipherChestService
 */
export interface ICipherChestServiceClient {
    /**
     * Get all chests visible to a user
     *
     * @generated from protobuf rpc: ListChests(chest.v1.ListChestsRequest) returns (chest.v1.ListChestsResponse);
     */
    listChests(input: ListChestsRequest, options?: RpcOptions): UnaryCall<ListChestsRequest, ListChestsResponse>;
    /**
     * @generated from protobuf rpc: GetTrymap(chest.v1.GetTrymapRequest) returns (chest.v1.GetTrymapResponse);
     */
    getTrymap(input: GetTrymapRequest, options?: RpcOptions): UnaryCall<GetTrymapRequest, GetTrymapResponse>;
    /**
     * @generated from protobuf rpc: SubmitGuess(chest.v1.SubmitGuessRequest) returns (chest.v1.SubmitGuessResponse);
     */
    submitGuess(input: SubmitGuessRequest, options?: RpcOptions): UnaryCall<SubmitGuessRequest, SubmitGuessResponse>;
    /**
     * @generated from protobuf rpc: SetNotification(chest.v1.SetNotificationRequest) returns (chest.v1.SetNotificationResponse);
     */
    setNotification(input: SetNotificationRequest, options?: RpcOptions): UnaryCall<SetNotificationRequest, SetNotificationResponse>;
}
/**
 * @generated from protobuf service chest.v1.CipherChestService
 */
export class CipherChestServiceClient implements ICipherChestServiceClient, ServiceInfo {
    typeName = CipherChestService.typeName;
    methods = CipherChestService.methods;
    options = CipherChestService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Get all chests visible to a user
     *
     * @generated from protobuf rpc: ListChests(chest.v1.ListChestsRequest) returns (chest.v1.ListChestsResponse);
     */
    listChests(input: ListChestsRequest, options?: RpcOptions): UnaryCall<ListChestsRequest, ListChestsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListChestsRequest, ListChestsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTrymap(chest.v1.GetTrymapRequest) returns (chest.v1.GetTrymapResponse);
     */
    getTrymap(input: GetTrymapRequest, options?: RpcOptions): UnaryCall<GetTrymapRequest, GetTrymapResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTrymapRequest, GetTrymapResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SubmitGuess(chest.v1.SubmitGuessRequest) returns (chest.v1.SubmitGuessResponse);
     */
    submitGuess(input: SubmitGuessRequest, options?: RpcOptions): UnaryCall<SubmitGuessRequest, SubmitGuessResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubmitGuessRequest, SubmitGuessResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetNotification(chest.v1.SetNotificationRequest) returns (chest.v1.SetNotificationResponse);
     */
    setNotification(input: SetNotificationRequest, options?: RpcOptions): UnaryCall<SetNotificationRequest, SetNotificationResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetNotificationRequest, SetNotificationResponse>("unary", this._transport, method, opt, input);
    }
}
