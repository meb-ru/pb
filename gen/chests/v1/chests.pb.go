// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: chests/v1/chests.proto

package chestsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChestType int32

const (
	ChestType_CHEST_TYPE_UNSPECIFIED ChestType = 0
	ChestType_CHEST_TYPE_REGULAR     ChestType = 1
	ChestType_CHEST_TYPE_PROMOTIONAL ChestType = 2
)

// Enum value maps for ChestType.
var (
	ChestType_name = map[int32]string{
		0: "CHEST_TYPE_UNSPECIFIED",
		1: "CHEST_TYPE_REGULAR",
		2: "CHEST_TYPE_PROMOTIONAL",
	}
	ChestType_value = map[string]int32{
		"CHEST_TYPE_UNSPECIFIED": 0,
		"CHEST_TYPE_REGULAR":     1,
		"CHEST_TYPE_PROMOTIONAL": 2,
	}
)

func (x ChestType) Enum() *ChestType {
	p := new(ChestType)
	*p = x
	return p
}

func (x ChestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChestType) Descriptor() protoreflect.EnumDescriptor {
	return file_chests_v1_chests_proto_enumTypes[0].Descriptor()
}

func (ChestType) Type() protoreflect.EnumType {
	return &file_chests_v1_chests_proto_enumTypes[0]
}

func (x ChestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChestType.Descriptor instead.
func (ChestType) EnumDescriptor() ([]byte, []int) {
	return file_chests_v1_chests_proto_rawDescGZIP(), []int{0}
}

type GetChestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *TgUser  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Id   *ChestId `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetChestsRequest) Reset() {
	*x = GetChestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chests_v1_chests_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChestsRequest) ProtoMessage() {}

func (x *GetChestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chests_v1_chests_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChestsRequest.ProtoReflect.Descriptor instead.
func (*GetChestsRequest) Descriptor() ([]byte, []int) {
	return file_chests_v1_chests_proto_rawDescGZIP(), []int{0}
}

func (x *GetChestsRequest) GetUser() *TgUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GetChestsRequest) GetId() *ChestId {
	if x != nil {
		return x.Id
	}
	return nil
}

type TgUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TgUser) Reset() {
	*x = TgUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chests_v1_chests_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TgUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TgUser) ProtoMessage() {}

func (x *TgUser) ProtoReflect() protoreflect.Message {
	mi := &file_chests_v1_chests_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TgUser.ProtoReflect.Descriptor instead.
func (*TgUser) Descriptor() ([]byte, []int) {
	return file_chests_v1_chests_proto_rawDescGZIP(), []int{1}
}

func (x *TgUser) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// TODO: can this be unsigned?
type ChestId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"zigzag64,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ChestId) Reset() {
	*x = ChestId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chests_v1_chests_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChestId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChestId) ProtoMessage() {}

func (x *ChestId) ProtoReflect() protoreflect.Message {
	mi := &file_chests_v1_chests_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChestId.ProtoReflect.Descriptor instead.
func (*ChestId) Descriptor() ([]byte, []int) {
	return file_chests_v1_chests_proto_rawDescGZIP(), []int{2}
}

func (x *ChestId) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetChestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chests   []*Chest `protobuf:"bytes,1,rep,name=chests,proto3" json:"chests,omitempty"`
	Selected uint32   `protobuf:"varint,2,opt,name=selected,proto3" json:"selected,omitempty"`
	// key in map cannot be bytes or message type
	ById       map[int64]*Chest `protobuf:"bytes,3,rep,name=by_id,json=byId,proto3" json:"by_id,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SelectedId *ChestId         `protobuf:"bytes,4,opt,name=selected_id,json=selectedId,proto3" json:"selected_id,omitempty"`
}

func (x *GetChestsResponse) Reset() {
	*x = GetChestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chests_v1_chests_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChestsResponse) ProtoMessage() {}

func (x *GetChestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chests_v1_chests_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChestsResponse.ProtoReflect.Descriptor instead.
func (*GetChestsResponse) Descriptor() ([]byte, []int) {
	return file_chests_v1_chests_proto_rawDescGZIP(), []int{3}
}

func (x *GetChestsResponse) GetChests() []*Chest {
	if x != nil {
		return x.Chests
	}
	return nil
}

func (x *GetChestsResponse) GetSelected() uint32 {
	if x != nil {
		return x.Selected
	}
	return 0
}

func (x *GetChestsResponse) GetById() map[int64]*Chest {
	if x != nil {
		return x.ById
	}
	return nil
}

func (x *GetChestsResponse) GetSelectedId() *ChestId {
	if x != nil {
		return x.SelectedId
	}
	return nil
}

type Chest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *ChestId  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Variety ChestType `protobuf:"varint,2,opt,name=variety,proto3,enum=chests.v1.ChestType" json:"variety,omitempty"`
	// Types that are assignable to State:
	//
	//	*Chest_Tried
	//	*Chest_Waiting
	//	*Chest_SolvedBy
	//	*Chest_Expired
	State    isChest_State `protobuf_oneof:"state"`
	Selected bool          `protobuf:"varint,15,opt,name=selected,proto3" json:"selected,omitempty"`
}

func (x *Chest) Reset() {
	*x = Chest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chests_v1_chests_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chest) ProtoMessage() {}

func (x *Chest) ProtoReflect() protoreflect.Message {
	mi := &file_chests_v1_chests_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chest.ProtoReflect.Descriptor instead.
func (*Chest) Descriptor() ([]byte, []int) {
	return file_chests_v1_chests_proto_rawDescGZIP(), []int{4}
}

func (x *Chest) GetId() *ChestId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Chest) GetVariety() ChestType {
	if x != nil {
		return x.Variety
	}
	return ChestType_CHEST_TYPE_UNSPECIFIED
}

func (m *Chest) GetState() isChest_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (x *Chest) GetTried() uint32 {
	if x, ok := x.GetState().(*Chest_Tried); ok {
		return x.Tried
	}
	return 0
}

func (x *Chest) GetWaiting() *timestamppb.Timestamp {
	if x, ok := x.GetState().(*Chest_Waiting); ok {
		return x.Waiting
	}
	return nil
}

func (x *Chest) GetSolvedBy() string {
	if x, ok := x.GetState().(*Chest_SolvedBy); ok {
		return x.SolvedBy
	}
	return ""
}

func (x *Chest) GetExpired() *timestamppb.Timestamp {
	if x, ok := x.GetState().(*Chest_Expired); ok {
		return x.Expired
	}
	return nil
}

func (x *Chest) GetSelected() bool {
	if x != nil {
		return x.Selected
	}
	return false
}

type isChest_State interface {
	isChest_State()
}

type Chest_Tried struct {
	// at least this many unique codes have been tried
	Tried uint32 `protobuf:"varint,3,opt,name=tried,proto3,oneof"`
}

type Chest_Waiting struct {
	// user has to wait until timestamp to try again
	Waiting *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=waiting,proto3,oneof"`
}

type Chest_SolvedBy struct {
	// the chest is solved by someone
	SolvedBy string `protobuf:"bytes,5,opt,name=solved_by,json=solvedBy,proto3,oneof"`
}

type Chest_Expired struct {
	// the chest expired without being solved
	Expired *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expired,proto3,oneof"`
}

func (*Chest_Tried) isChest_State() {}

func (*Chest_Waiting) isChest_State() {}

func (*Chest_SolvedBy) isChest_State() {}

func (*Chest_Expired) isChest_State() {}

type GetChestTrymapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ChestId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetChestTrymapRequest) Reset() {
	*x = GetChestTrymapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chests_v1_chests_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChestTrymapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChestTrymapRequest) ProtoMessage() {}

func (x *GetChestTrymapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chests_v1_chests_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChestTrymapRequest.ProtoReflect.Descriptor instead.
func (*GetChestTrymapRequest) Descriptor() ([]byte, []int) {
	return file_chests_v1_chests_proto_rawDescGZIP(), []int{5}
}

func (x *GetChestTrymapRequest) GetId() *ChestId {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetChestTrymapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bitmap of attempts made by all users
	// zero length unless it is the current chest
	Trymap []byte `protobuf:"bytes,1,opt,name=trymap,proto3" json:"trymap,omitempty"`
}

func (x *GetChestTrymapResponse) Reset() {
	*x = GetChestTrymapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chests_v1_chests_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChestTrymapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChestTrymapResponse) ProtoMessage() {}

func (x *GetChestTrymapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chests_v1_chests_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChestTrymapResponse.ProtoReflect.Descriptor instead.
func (*GetChestTrymapResponse) Descriptor() ([]byte, []int) {
	return file_chests_v1_chests_proto_rawDescGZIP(), []int{6}
}

func (x *GetChestTrymapResponse) GetTrymap() []byte {
	if x != nil {
		return x.Trymap
	}
	return nil
}

type SubmitGuessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *ChestId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Guess uint32   `protobuf:"varint,2,opt,name=guess,proto3" json:"guess,omitempty"`
}

func (x *SubmitGuessRequest) Reset() {
	*x = SubmitGuessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chests_v1_chests_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitGuessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitGuessRequest) ProtoMessage() {}

func (x *SubmitGuessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chests_v1_chests_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitGuessRequest.ProtoReflect.Descriptor instead.
func (*SubmitGuessRequest) Descriptor() ([]byte, []int) {
	return file_chests_v1_chests_proto_rawDescGZIP(), []int{7}
}

func (x *SubmitGuessRequest) GetId() *ChestId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubmitGuessRequest) GetGuess() uint32 {
	if x != nil {
		return x.Guess
	}
	return 0
}

// Should a conflict be a different state or an error status?
type SubmitGuessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Won bool `protobuf:"varint,1,opt,name=won,proto3" json:"won,omitempty"`
}

func (x *SubmitGuessResponse) Reset() {
	*x = SubmitGuessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chests_v1_chests_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitGuessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitGuessResponse) ProtoMessage() {}

func (x *SubmitGuessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chests_v1_chests_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitGuessResponse.ProtoReflect.Descriptor instead.
func (*SubmitGuessResponse) Descriptor() ([]byte, []int) {
	return file_chests_v1_chests_proto_rawDescGZIP(), []int{8}
}

func (x *SubmitGuessResponse) GetWon() bool {
	if x != nil {
		return x.Won
	}
	return false
}

type SetNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *ChestId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EnableNotificatons bool     `protobuf:"varint,2,opt,name=enable_notificatons,json=enableNotificatons,proto3" json:"enable_notificatons,omitempty"`
}

func (x *SetNotificationRequest) Reset() {
	*x = SetNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chests_v1_chests_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNotificationRequest) ProtoMessage() {}

func (x *SetNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chests_v1_chests_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNotificationRequest.ProtoReflect.Descriptor instead.
func (*SetNotificationRequest) Descriptor() ([]byte, []int) {
	return file_chests_v1_chests_proto_rawDescGZIP(), []int{9}
}

func (x *SetNotificationRequest) GetId() *ChestId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SetNotificationRequest) GetEnableNotificatons() bool {
	if x != nil {
		return x.EnableNotificatons
	}
	return false
}

type SetNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetNotificationResponse) Reset() {
	*x = SetNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chests_v1_chests_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNotificationResponse) ProtoMessage() {}

func (x *SetNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chests_v1_chests_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNotificationResponse.ProtoReflect.Descriptor instead.
func (*SetNotificationResponse) Descriptor() ([]byte, []int) {
	return file_chests_v1_chests_proto_rawDescGZIP(), []int{10}
}

var File_chests_v1_chests_proto protoreflect.FileDescriptor

var file_chests_v1_chests_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x74, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x06, 0x54, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x19, 0x0a,
	0x07, 0x43, 0x68, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x02, 0x69, 0x64, 0x22, 0x96, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x06, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x74,
	0x52, 0x06, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x42, 0x79, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x62, 0x79, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x74, 0x49, 0x64, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x49, 0x64, 0x1a, 0x49, 0x0a, 0x09, 0x42, 0x79, 0x49, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x65, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xa7, 0x02, 0x0a, 0x05, 0x43, 0x68, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2e, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x05, 0x74, 0x72, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x05, 0x74, 0x72, 0x69, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x1d, 0x0a, 0x09, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x42, 0x79, 0x12, 0x36,
	0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x3b, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x65, 0x73, 0x74, 0x54, 0x72, 0x79, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x65, 0x73, 0x74, 0x54, 0x72, 0x79, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x72, 0x79, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x74, 0x72, 0x79, 0x6d, 0x61, 0x70, 0x22, 0x4e, 0x0a, 0x12, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x47, 0x75, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x75, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x75, 0x65, 0x73, 0x73, 0x22, 0x27, 0x0a, 0x13, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x47, 0x75, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x77, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x6e, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x5b, 0x0a,
	0x09, 0x43, 0x68, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x48,
	0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x45, 0x53, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x43, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x32, 0xe4, 0x02, 0x0a, 0x13, 0x43,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x43, 0x68, 0x65, 0x73, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x1b, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x73, 0x74, 0x54, 0x72, 0x79, 0x6d, 0x61, 0x70, 0x12, 0x20,
	0x2e, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x65, 0x73, 0x74, 0x54, 0x72, 0x79, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x65, 0x73, 0x74, 0x54, 0x72, 0x79, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x47,
	0x75, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x47, 0x75, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x47, 0x75, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x8a, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x42, 0x0b, 0x43, 0x68, 0x65, 0x73, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
	0x65, 0x62, 0x2d, 0x72, 0x75, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x3b, 0x63, 0x68, 0x65, 0x73, 0x74, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x58,
	0x58, 0xaa, 0x02, 0x09, 0x43, 0x68, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x09,
	0x43, 0x68, 0x65, 0x73, 0x74, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x15, 0x43, 0x68, 0x65, 0x73,
	0x74, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x0a, 0x43, 0x68, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chests_v1_chests_proto_rawDescOnce sync.Once
	file_chests_v1_chests_proto_rawDescData = file_chests_v1_chests_proto_rawDesc
)

func file_chests_v1_chests_proto_rawDescGZIP() []byte {
	file_chests_v1_chests_proto_rawDescOnce.Do(func() {
		file_chests_v1_chests_proto_rawDescData = protoimpl.X.CompressGZIP(file_chests_v1_chests_proto_rawDescData)
	})
	return file_chests_v1_chests_proto_rawDescData
}

var file_chests_v1_chests_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chests_v1_chests_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_chests_v1_chests_proto_goTypes = []any{
	(ChestType)(0),                  // 0: chests.v1.ChestType
	(*GetChestsRequest)(nil),        // 1: chests.v1.GetChestsRequest
	(*TgUser)(nil),                  // 2: chests.v1.TgUser
	(*ChestId)(nil),                 // 3: chests.v1.ChestId
	(*GetChestsResponse)(nil),       // 4: chests.v1.GetChestsResponse
	(*Chest)(nil),                   // 5: chests.v1.Chest
	(*GetChestTrymapRequest)(nil),   // 6: chests.v1.GetChestTrymapRequest
	(*GetChestTrymapResponse)(nil),  // 7: chests.v1.GetChestTrymapResponse
	(*SubmitGuessRequest)(nil),      // 8: chests.v1.SubmitGuessRequest
	(*SubmitGuessResponse)(nil),     // 9: chests.v1.SubmitGuessResponse
	(*SetNotificationRequest)(nil),  // 10: chests.v1.SetNotificationRequest
	(*SetNotificationResponse)(nil), // 11: chests.v1.SetNotificationResponse
	nil,                             // 12: chests.v1.GetChestsResponse.ByIdEntry
	(*timestamppb.Timestamp)(nil),   // 13: google.protobuf.Timestamp
}
var file_chests_v1_chests_proto_depIdxs = []int32{
	2,  // 0: chests.v1.GetChestsRequest.user:type_name -> chests.v1.TgUser
	3,  // 1: chests.v1.GetChestsRequest.id:type_name -> chests.v1.ChestId
	5,  // 2: chests.v1.GetChestsResponse.chests:type_name -> chests.v1.Chest
	12, // 3: chests.v1.GetChestsResponse.by_id:type_name -> chests.v1.GetChestsResponse.ByIdEntry
	3,  // 4: chests.v1.GetChestsResponse.selected_id:type_name -> chests.v1.ChestId
	3,  // 5: chests.v1.Chest.id:type_name -> chests.v1.ChestId
	0,  // 6: chests.v1.Chest.variety:type_name -> chests.v1.ChestType
	13, // 7: chests.v1.Chest.waiting:type_name -> google.protobuf.Timestamp
	13, // 8: chests.v1.Chest.expired:type_name -> google.protobuf.Timestamp
	3,  // 9: chests.v1.GetChestTrymapRequest.id:type_name -> chests.v1.ChestId
	3,  // 10: chests.v1.SubmitGuessRequest.id:type_name -> chests.v1.ChestId
	3,  // 11: chests.v1.SetNotificationRequest.id:type_name -> chests.v1.ChestId
	5,  // 12: chests.v1.GetChestsResponse.ByIdEntry.value:type_name -> chests.v1.Chest
	1,  // 13: chests.v1.CipherChestsService.GetChests:input_type -> chests.v1.GetChestsRequest
	6,  // 14: chests.v1.CipherChestsService.GetChestTrymap:input_type -> chests.v1.GetChestTrymapRequest
	8,  // 15: chests.v1.CipherChestsService.SubmitGuess:input_type -> chests.v1.SubmitGuessRequest
	10, // 16: chests.v1.CipherChestsService.SetNotification:input_type -> chests.v1.SetNotificationRequest
	4,  // 17: chests.v1.CipherChestsService.GetChests:output_type -> chests.v1.GetChestsResponse
	7,  // 18: chests.v1.CipherChestsService.GetChestTrymap:output_type -> chests.v1.GetChestTrymapResponse
	9,  // 19: chests.v1.CipherChestsService.SubmitGuess:output_type -> chests.v1.SubmitGuessResponse
	11, // 20: chests.v1.CipherChestsService.SetNotification:output_type -> chests.v1.SetNotificationResponse
	17, // [17:21] is the sub-list for method output_type
	13, // [13:17] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_chests_v1_chests_proto_init() }
func file_chests_v1_chests_proto_init() {
	if File_chests_v1_chests_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chests_v1_chests_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetChestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chests_v1_chests_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TgUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chests_v1_chests_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ChestId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chests_v1_chests_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetChestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chests_v1_chests_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Chest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chests_v1_chests_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetChestTrymapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chests_v1_chests_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetChestTrymapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chests_v1_chests_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*SubmitGuessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chests_v1_chests_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SubmitGuessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chests_v1_chests_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*SetNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chests_v1_chests_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SetNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chests_v1_chests_proto_msgTypes[4].OneofWrappers = []any{
		(*Chest_Tried)(nil),
		(*Chest_Waiting)(nil),
		(*Chest_SolvedBy)(nil),
		(*Chest_Expired)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chests_v1_chests_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chests_v1_chests_proto_goTypes,
		DependencyIndexes: file_chests_v1_chests_proto_depIdxs,
		EnumInfos:         file_chests_v1_chests_proto_enumTypes,
		MessageInfos:      file_chests_v1_chests_proto_msgTypes,
	}.Build()
	File_chests_v1_chests_proto = out.File
	file_chests_v1_chests_proto_rawDesc = nil
	file_chests_v1_chests_proto_goTypes = nil
	file_chests_v1_chests_proto_depIdxs = nil
}
