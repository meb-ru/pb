// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: chest/v1/chest.proto

package chestv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CipherChestService_ListChests_FullMethodName      = "/chest.v1.CipherChestService/ListChests"
	CipherChestService_GetTrymap_FullMethodName       = "/chest.v1.CipherChestService/GetTrymap"
	CipherChestService_SubmitGuess_FullMethodName     = "/chest.v1.CipherChestService/SubmitGuess"
	CipherChestService_SetNotification_FullMethodName = "/chest.v1.CipherChestService/SetNotification"
)

// CipherChestServiceClient is the client API for CipherChestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CipherChestServiceClient interface {
	// Get all chests visible to a user
	ListChests(ctx context.Context, in *ListChestsRequest, opts ...grpc.CallOption) (*ListChestsResponse, error)
	GetTrymap(ctx context.Context, in *GetTrymapRequest, opts ...grpc.CallOption) (*GetTrymapResponse, error)
	SubmitGuess(ctx context.Context, in *SubmitGuessRequest, opts ...grpc.CallOption) (*SubmitGuessResponse, error)
	SetNotification(ctx context.Context, in *SetNotificationRequest, opts ...grpc.CallOption) (*SetNotificationResponse, error)
}

type cipherChestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCipherChestServiceClient(cc grpc.ClientConnInterface) CipherChestServiceClient {
	return &cipherChestServiceClient{cc}
}

func (c *cipherChestServiceClient) ListChests(ctx context.Context, in *ListChestsRequest, opts ...grpc.CallOption) (*ListChestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChestsResponse)
	err := c.cc.Invoke(ctx, CipherChestService_ListChests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cipherChestServiceClient) GetTrymap(ctx context.Context, in *GetTrymapRequest, opts ...grpc.CallOption) (*GetTrymapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrymapResponse)
	err := c.cc.Invoke(ctx, CipherChestService_GetTrymap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cipherChestServiceClient) SubmitGuess(ctx context.Context, in *SubmitGuessRequest, opts ...grpc.CallOption) (*SubmitGuessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitGuessResponse)
	err := c.cc.Invoke(ctx, CipherChestService_SubmitGuess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cipherChestServiceClient) SetNotification(ctx context.Context, in *SetNotificationRequest, opts ...grpc.CallOption) (*SetNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetNotificationResponse)
	err := c.cc.Invoke(ctx, CipherChestService_SetNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CipherChestServiceServer is the server API for CipherChestService service.
// All implementations must embed UnimplementedCipherChestServiceServer
// for forward compatibility.
type CipherChestServiceServer interface {
	// Get all chests visible to a user
	ListChests(context.Context, *ListChestsRequest) (*ListChestsResponse, error)
	GetTrymap(context.Context, *GetTrymapRequest) (*GetTrymapResponse, error)
	SubmitGuess(context.Context, *SubmitGuessRequest) (*SubmitGuessResponse, error)
	SetNotification(context.Context, *SetNotificationRequest) (*SetNotificationResponse, error)
	mustEmbedUnimplementedCipherChestServiceServer()
}

// UnimplementedCipherChestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCipherChestServiceServer struct{}

func (UnimplementedCipherChestServiceServer) ListChests(context.Context, *ListChestsRequest) (*ListChestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChests not implemented")
}
func (UnimplementedCipherChestServiceServer) GetTrymap(context.Context, *GetTrymapRequest) (*GetTrymapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrymap not implemented")
}
func (UnimplementedCipherChestServiceServer) SubmitGuess(context.Context, *SubmitGuessRequest) (*SubmitGuessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitGuess not implemented")
}
func (UnimplementedCipherChestServiceServer) SetNotification(context.Context, *SetNotificationRequest) (*SetNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNotification not implemented")
}
func (UnimplementedCipherChestServiceServer) mustEmbedUnimplementedCipherChestServiceServer() {}
func (UnimplementedCipherChestServiceServer) testEmbeddedByValue()                            {}

// UnsafeCipherChestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CipherChestServiceServer will
// result in compilation errors.
type UnsafeCipherChestServiceServer interface {
	mustEmbedUnimplementedCipherChestServiceServer()
}

func RegisterCipherChestServiceServer(s grpc.ServiceRegistrar, srv CipherChestServiceServer) {
	// If the following call pancis, it indicates UnimplementedCipherChestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CipherChestService_ServiceDesc, srv)
}

func _CipherChestService_ListChests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CipherChestServiceServer).ListChests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CipherChestService_ListChests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CipherChestServiceServer).ListChests(ctx, req.(*ListChestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CipherChestService_GetTrymap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrymapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CipherChestServiceServer).GetTrymap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CipherChestService_GetTrymap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CipherChestServiceServer).GetTrymap(ctx, req.(*GetTrymapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CipherChestService_SubmitGuess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitGuessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CipherChestServiceServer).SubmitGuess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CipherChestService_SubmitGuess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CipherChestServiceServer).SubmitGuess(ctx, req.(*SubmitGuessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CipherChestService_SetNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CipherChestServiceServer).SetNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CipherChestService_SetNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CipherChestServiceServer).SetNotification(ctx, req.(*SetNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CipherChestService_ServiceDesc is the grpc.ServiceDesc for CipherChestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CipherChestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chest.v1.CipherChestService",
	HandlerType: (*CipherChestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListChests",
			Handler:    _CipherChestService_ListChests_Handler,
		},
		{
			MethodName: "GetTrymap",
			Handler:    _CipherChestService_GetTrymap_Handler,
		},
		{
			MethodName: "SubmitGuess",
			Handler:    _CipherChestService_SubmitGuess_Handler,
		},
		{
			MethodName: "SetNotification",
			Handler:    _CipherChestService_SetNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chest/v1/chest.proto",
}
