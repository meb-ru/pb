// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.0
// source: chests/chests.proto

package chests

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CipherChests_GetChests_FullMethodName       = "/chests.CipherChests/GetChests"
	CipherChests_GetChestTrymap_FullMethodName  = "/chests.CipherChests/GetChestTrymap"
	CipherChests_SubmitGuess_FullMethodName     = "/chests.CipherChests/SubmitGuess"
	CipherChests_SetNotification_FullMethodName = "/chests.CipherChests/SetNotification"
)

// CipherChestsClient is the client API for CipherChests service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CipherChestsClient interface {
	// Get all chests visible to a user
	GetChests(ctx context.Context, in *GetChestsRequest, opts ...grpc.CallOption) (*GetChestsReply, error)
	GetChestTrymap(ctx context.Context, in *GetChestTrymapRequest, opts ...grpc.CallOption) (*GetChestTrymapReply, error)
	SubmitGuess(ctx context.Context, in *SubmitGuessRequest, opts ...grpc.CallOption) (*SubmitGuessReply, error)
	SetNotification(ctx context.Context, in *SetNotificationRequest, opts ...grpc.CallOption) (*SetNotificationReply, error)
}

type cipherChestsClient struct {
	cc grpc.ClientConnInterface
}

func NewCipherChestsClient(cc grpc.ClientConnInterface) CipherChestsClient {
	return &cipherChestsClient{cc}
}

func (c *cipherChestsClient) GetChests(ctx context.Context, in *GetChestsRequest, opts ...grpc.CallOption) (*GetChestsReply, error) {
	out := new(GetChestsReply)
	err := c.cc.Invoke(ctx, CipherChests_GetChests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cipherChestsClient) GetChestTrymap(ctx context.Context, in *GetChestTrymapRequest, opts ...grpc.CallOption) (*GetChestTrymapReply, error) {
	out := new(GetChestTrymapReply)
	err := c.cc.Invoke(ctx, CipherChests_GetChestTrymap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cipherChestsClient) SubmitGuess(ctx context.Context, in *SubmitGuessRequest, opts ...grpc.CallOption) (*SubmitGuessReply, error) {
	out := new(SubmitGuessReply)
	err := c.cc.Invoke(ctx, CipherChests_SubmitGuess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cipherChestsClient) SetNotification(ctx context.Context, in *SetNotificationRequest, opts ...grpc.CallOption) (*SetNotificationReply, error) {
	out := new(SetNotificationReply)
	err := c.cc.Invoke(ctx, CipherChests_SetNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CipherChestsServer is the server API for CipherChests service.
// All implementations must embed UnimplementedCipherChestsServer
// for forward compatibility
type CipherChestsServer interface {
	// Get all chests visible to a user
	GetChests(context.Context, *GetChestsRequest) (*GetChestsReply, error)
	GetChestTrymap(context.Context, *GetChestTrymapRequest) (*GetChestTrymapReply, error)
	SubmitGuess(context.Context, *SubmitGuessRequest) (*SubmitGuessReply, error)
	SetNotification(context.Context, *SetNotificationRequest) (*SetNotificationReply, error)
	mustEmbedUnimplementedCipherChestsServer()
}

// UnimplementedCipherChestsServer must be embedded to have forward compatible implementations.
type UnimplementedCipherChestsServer struct {
}

func (UnimplementedCipherChestsServer) GetChests(context.Context, *GetChestsRequest) (*GetChestsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChests not implemented")
}
func (UnimplementedCipherChestsServer) GetChestTrymap(context.Context, *GetChestTrymapRequest) (*GetChestTrymapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChestTrymap not implemented")
}
func (UnimplementedCipherChestsServer) SubmitGuess(context.Context, *SubmitGuessRequest) (*SubmitGuessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitGuess not implemented")
}
func (UnimplementedCipherChestsServer) SetNotification(context.Context, *SetNotificationRequest) (*SetNotificationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNotification not implemented")
}
func (UnimplementedCipherChestsServer) mustEmbedUnimplementedCipherChestsServer() {}

// UnsafeCipherChestsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CipherChestsServer will
// result in compilation errors.
type UnsafeCipherChestsServer interface {
	mustEmbedUnimplementedCipherChestsServer()
}

func RegisterCipherChestsServer(s grpc.ServiceRegistrar, srv CipherChestsServer) {
	s.RegisterService(&CipherChests_ServiceDesc, srv)
}

func _CipherChests_GetChests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CipherChestsServer).GetChests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CipherChests_GetChests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CipherChestsServer).GetChests(ctx, req.(*GetChestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CipherChests_GetChestTrymap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChestTrymapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CipherChestsServer).GetChestTrymap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CipherChests_GetChestTrymap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CipherChestsServer).GetChestTrymap(ctx, req.(*GetChestTrymapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CipherChests_SubmitGuess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitGuessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CipherChestsServer).SubmitGuess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CipherChests_SubmitGuess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CipherChestsServer).SubmitGuess(ctx, req.(*SubmitGuessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CipherChests_SetNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CipherChestsServer).SetNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CipherChests_SetNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CipherChestsServer).SetNotification(ctx, req.(*SetNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CipherChests_ServiceDesc is the grpc.ServiceDesc for CipherChests service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CipherChests_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chests.CipherChests",
	HandlerType: (*CipherChestsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChests",
			Handler:    _CipherChests_GetChests_Handler,
		},
		{
			MethodName: "GetChestTrymap",
			Handler:    _CipherChests_GetChestTrymap_Handler,
		},
		{
			MethodName: "SubmitGuess",
			Handler:    _CipherChests_SubmitGuess_Handler,
		},
		{
			MethodName: "SetNotification",
			Handler:    _CipherChests_SetNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chests/chests.proto",
}
