// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.0
// source: chests/chests.proto

package chests

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Chests_Chests_FullMethodName = "/Chests/Chests"
)

// ChestsClient is the client API for Chests service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChestsClient interface {
	// Sends a greeting
	Chests(ctx context.Context, in *ChestsRequest, opts ...grpc.CallOption) (*ChestsReply, error)
}

type chestsClient struct {
	cc grpc.ClientConnInterface
}

func NewChestsClient(cc grpc.ClientConnInterface) ChestsClient {
	return &chestsClient{cc}
}

func (c *chestsClient) Chests(ctx context.Context, in *ChestsRequest, opts ...grpc.CallOption) (*ChestsReply, error) {
	out := new(ChestsReply)
	err := c.cc.Invoke(ctx, Chests_Chests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChestsServer is the server API for Chests service.
// All implementations must embed UnimplementedChestsServer
// for forward compatibility
type ChestsServer interface {
	// Sends a greeting
	Chests(context.Context, *ChestsRequest) (*ChestsReply, error)
	mustEmbedUnimplementedChestsServer()
}

// UnimplementedChestsServer must be embedded to have forward compatible implementations.
type UnimplementedChestsServer struct {
}

func (UnimplementedChestsServer) Chests(context.Context, *ChestsRequest) (*ChestsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chests not implemented")
}
func (UnimplementedChestsServer) mustEmbedUnimplementedChestsServer() {}

// UnsafeChestsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChestsServer will
// result in compilation errors.
type UnsafeChestsServer interface {
	mustEmbedUnimplementedChestsServer()
}

func RegisterChestsServer(s grpc.ServiceRegistrar, srv ChestsServer) {
	s.RegisterService(&Chests_ServiceDesc, srv)
}

func _Chests_Chests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChestsServer).Chests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chests_Chests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChestsServer).Chests(ctx, req.(*ChestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chests_ServiceDesc is the grpc.ServiceDesc for Chests service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chests_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Chests",
	HandlerType: (*ChestsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Chests",
			Handler:    _Chests_Chests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chests/chests.proto",
}
